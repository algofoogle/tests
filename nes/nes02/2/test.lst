ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : test.s
Current file: test.s

000000r 1               ; In this example, I will start assembling a skeleton iNES-compatible .nes file
000000r 1               ; structure that, when assembled and linked, should spit out the binary image of
000000r 1               ; a valid (albeit useless) .nes file.
000000r 1               ; For the iNES file format, see: http://wiki.nesdev.com/w/index.php/INES
000000r 1               
000000r 1               ; =============================== iNES HEADER ==========================================
000000r 1               
000000r 1               ; First we create the iNES header, which we will assume can be said to start at $0000:
000000r 1               .org $0000
000000  1               
000000  1               ; ...and the following iNES header defines a .nes file which is expected to have the following
000000  1               ; binary layout:
000000  1               ;	1.	0x0000-0x000F:	Header (16 bytes).
000000  1               ;	2.	0x0010-0x400F:	PRG ROM (one PRG chunk; 16KiB).
000000  1               ;	3.	0x4010-0x600F:	CHR ROM (one CHR chunk; 8KiB).
000000  1               ; In total: 24,592 bytes. This is, typically, the smallest size a .nes file should be,
000000  1               ; even though a minimal program will use only a small portion of that available space.
000000  1               ; It is also possible to have ZERO chunks of CHR ROM, in which case the file would shrink
000000  1               ; by 8KiB (to 16,400 bytes in this case). That condition indicates CHR RAM is in use.
000000  1               
000000  1  4E 45 53 1A  .byt "NES",$1A			; Header magic.
000004  1  01           .byt 1 					; Specify that we have only 1 x PRG ROM chunk (16KiB).
000005  1  01           .byt 1 					; ...and only 1 x CHR ROM chunk (8KiB).
000006  1  00           .byt %00000000			; 'Flags 6' bits:
000007  1               						;	{3,0}:
000007  1               						;		00 = vertical arrangement with horizontal mirroring
000007  1               						;		01 = horizontal arrangement with vertical mirroring
000007  1               						;		1x = four-screen VRAM
000007  1               						;	1:	1 = SRAM, if present, is battery backed-up. This SRAM (8KiB)
000007  1               						;			would be located at $6000-$7FFF in the CPU's address space.
000007  1               						;	2:	1 = A 512-byte 'trainer' immediately follows the iNES header,
000007  1               						;			and would be mapped to $7000-$71FF.
000007  1               						;	{7-4}: Lower nibble of the mapper number.
000007  1  00           .byt %00000000			; 'Flags 7' bits:
000008  1               						;	0:	1 = VS Unisystem (coin-slot-based machines).
000008  1               						;	1:	1 = PlayChoice-10 (8KiB of Hint Screen data follows the CHR ROM).
000008  1               						;	{3,2}:
000008  1               						;		10 = Flags 8-15 are in NES 2.0 format.
000008  1               						;	{7-4}: Upper nibble of the mapper number.
000008  1  00           .byt 0 					; We have 0 x 8KiB chunks of PRG RAM, though apparently this actually
000009  1               						; infers that we have 1 x 8KiB chunk, for compatibility reasons that I
000009  1               						; don't fully understand but probably has something to do with a fallback
000009  1               						; assumption that any given simple cartridge may or may not have had RAM??
000009  1               						; See http://wiki.nesdev.com/w/index.php/PRG_RAM_circuit for more info.
000009  1  00           .byt %00000000 			; 'Flags 9' bits:
00000A  1               						; 	0:	0 = NTSC; 1 = PAL. Actually this is mostly ignored.
00000A  1               						;	{7-1}:	Reserved, set to 0.
00000A  1  00           .byt %00000000			; 'Flags 10' bits:
00000B  1               						; 	{1,0}: TV system:
00000B  1               						;		00 = NTSC
00000B  1               						;		01 = dual compatible
00000B  1               						;		10 = PAL
00000B  1               						;		11 = dual compatible
00000B  1               						;	{3,2}: Unused.
00000B  1               						;	4:	0 = SRAM in $6000-$7FFF is present.
00000B  1               						;		1 = SRAM is absent.
00000B  1               						;	5:	0 = Board has no bus conflicts.
00000B  1               						;		1 = Board has bus conflicts, so adjust emulation to suit.
00000B  1               						; 		For more info, see: http://wiki.nesdev.com/w/index.php/Bus_conflict
00000B  1  00 00 00 00  .res (16-*), $00 		; Pad the rest of the header out to 16, with $00 as the filler.
00000F  1  00           
000010  1               
000010  1               ; So in summary, the settings above define:
000010  1               ; 	* This is iNES 1 format.
000010  1               ;	* PRG ROM is one chunk; 16KiB.
000010  1               ;	* CHR ROM is one chunk; 8KiB.
000010  1               ;	* Use vertical arrangement of the VRAM, with horizontal mirroring.
000010  1               ;	* We're using mapper 000 (basic NROM).
000010  1               ;	* The iNES-implied 8KiB of RAM is assumed to be present at $6000-$7FFF on the bus.
000010  1               ;	* This is an NTSC cart.
000010  1               ;	* There are no bus conflicts.
000010  1               
000010  1               ; Note that, so far, all of this data is specific to the iNES format, and none of it is
000010  1               ; actual binary data that would appear in a real equivalent NES cartridge, though some of
000010  1               ; it DOES (sort of) describe the electronics in the cart.
000010  1               
000010  1               ; =============================== PRG ROM ==========================================
000010  1               
000010  1               ; PRG ROM size (defined above) is 16KiB, mapped to $C000-$FFFF.
000010  1               .org $C000
00C000  1               
00C000  1               	;;;;;;;;;;;;;;
00C000  1               	;; MAIN PRG CODE GOES HERE
00C000  1               	;;;;;;;;;;;;;;
00C000  1               
00C000  1               
00C000  1               ; Pad out the PRG ROM to $FFFF.
00C000  1  00 00 00 00  .res ($10000-*), $00
00C004  1  00 00 00 00  
00C008  1  00 00 00 00  
010000  1               
010000  1               ; =============================== CHR ROM ==========================================
010000  1               
010000  1               ; NOTE: Instead of putting the CHR ROM into this source file, you could just have it as
010000  1               ; a separate binary file (e.g. created with 'chromp') and then 'cat' it onto your .nes file,
010000  1               ; or otherwise include its raw binary data here with .incbin.
010000  1               
010000  1               ; The PPU (Picture Processing Unit) in the NES has its own address space
010000  1               ; (http://wiki.nesdev.com/w/index.php/PPU), in which $0000-$0FFF is "Pattern Table 0"
010000  1               ; (or the lower CHR bank), and $1000-$1FFF is "Pattern Table 1" (or the upper CHR bank),
010000  1               ; for a total of 8KiB of "pattern data".
010000  1               ; The cartridge typically maps this to CHR ROM or CHR RAM, and can map it to more than
010000  1               ; one bank by use of a 'mapper'.
010000  1               ; See http://wiki.nesdev.com/w/index.php/PPU_memory_map for more info.
010000  1               
010000  1               ; Pattern Table 0:
010000  1               .org $0000
000000  1               
000000  1               	;;;;;;;;;;;;;;
000000  1               	;; PATTERN TABLE 0 DATA GOES HERE
000000  1               	;;;;;;;;;;;;;;
000000  1               
000000  1               ; Pad out to 4KiB:
000000  1  00 00 00 00  .res ($1000-*), $00
000004  1  00 00 00 00  
000008  1  00 00 00 00  
001000  1               
001000  1               ; Pattern Table 1:
001000  1               	;;;;;;;;;;;;;;
001000  1               	;; PATTERN TABLE 0 DATA GOES HERE
001000  1               	;;;;;;;;;;;;;;
001000  1               
001000  1               ; Pad out to 8KiB:
001000  1  00 00 00 00  .res ($2000-*), $00
001004  1  00 00 00 00  
001008  1  00 00 00 00  
001000  1               
