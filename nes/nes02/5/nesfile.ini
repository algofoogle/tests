# This is a configuration file (as per: http://www.cc65.org/doc/ld65-5.html) that
# tells ld65 how we want to lay out our output file, but also what actual
# absolute addresses to assign per code and variable reservations that
# otherwise don't care in the main source file(s) (e.g. for the addresses of
# variables that could really be located anywhere, so long as they're in the
# valid range of the system RAM).

# This file is heavily-commented because it can otherwise be a bit confusing.

# NOTE: It is possible to dump a config (of this sort of format) for one of the
# built-in ld65 '-t' target types, as follows:
#	ld65 --dump-config nes

# NOTE: Parts of this file are inspired by "nrom-template-0.02" written by
# Damian Yerrick (tepples). See: http://pics.pineight.com/nes/
# ...and in particular: http://pics.pineight.com/nes/nrom-template-0.02.zip

# Key advantages of using this file include:
# 	1. It simplifies how you define, reserve, and fill:
#		RAM; code blocks; and other special memory areas;
#	2. It ensures it's almost impossible for the source code to make
#		a mistake in terms of how the output file is structured.
#	3. It increases the overall readability and interpretation of the
#		source files.

# -----	MEMORY section ------------------------------------------------------------

# The MEMORY section defines the memory map of the NES, but also defines which of the
# memory regions are output to our target binary file, and in what order. For
# the file output, it follows the iNES format:
# 	(16-byte header) + (a * 16KiB PRG) + (b * 8KiB CHR)
# ...where 'a' is the no. of PRG blocks defined in the iNES header (which would have
# to be 1, according to the definition of 'ROM7' in this configuration file),
# and 'b' is the no. of CHR blocks defined (again, 1 permitted by this config).

# See http://forums.nesdev.com/viewtopic.php?t=7846 for NROM schematics and discussion.

# NOTE: An alternative to 'file=%O' would be to write each portion to a separate file
# (e.g. 'file="header.bin"', 'file="prg-rom.bin"'), and then 'cat' them at the end:
#	cat header.bin prg-rom.bin chr-rom.bin > mygame.nes

MEMORY {

	# Zero Page actually starts at $0000 and finishes at $00FF,
	# but we'll reserve $00-$0F for locals. The absence of a 'file'
	# attribute means this doesn't get written to the file.
	ZP:		start=$10, size=$f0, type=rw;

	# The first $10 bytes output to the file are the iNES header,
	# which is padded out with $00. This does not represent an actual part
	# of the NES memory map, but still needs to be defined as a block of
	# exactly 16 bytes, the contents of which will be defined in the
	# main source files.
	HEADER:	start=0, size=$10, type=ro, file=%O, fill=yes, fillval=$00;

	# NES RAM runs from $0000-$07FF, but $0000-$00FF is zero page,
	# and $0100-$01FF is the stack. So, we break it up as follows....

	# --- Stack first:
	STACK:	start=$0100, size=$0100, type=rw;

    # --- Then reserve $0100 bytes...
	# For whatever reason, we reserve $0200-$02FF and don't use it as part
	# of our RAM. Maybe it's because it will be used as a sort of "data stack"
	# as described here: http://forum.6502.org/viewtopic.php?t=148#p875

    # --- Generic, available RAM:
	# We just define our 'RAM' as the remaining space from $0300-$07FF:
	RAM:	start=$0300, size=$0500, type=rw;

	# --- Cartridge RAM, if present:
	# Cartridges may have RAM in them mapped from $6000-$7FFF:
	EXTRAM:	start=$6000, size=$2000, type=rw;

	# Our 16KiB of PRG ROM sits at the top of memory, from $C000-$FFFF.
	# I'm not sure why it's called ROM7... IF we said the upper 3 bits
	# of the address lines (A13-A15) divided our address space into 8
	# portions, then $C000-$DFFF would be the "7th of 8", but this hardly
	# makes sense. It may also be based on this CPU memory map:
	#	http://wiki.nesdev.com/w/index.php/CPU_memory_map
	# ...where, if the rows were numbered 0-7, the bottom one would be 'ROM7',
	# I guess.
	ROM7:	start=$C000, size=$4000, type=ro, file=%O, fill=yes, fillval=$FF;

	# Our 8KiB CHR ROM sits on the PPU's address bus at $0000-$1FFF.
	# It gets written after ROM7, to the target .nes file. Note that I've
	# defined it as type=ro here, but it COULD be read-write if it were RAM.
	CHR:	start=$0000, size=$2000, type=ro, file=%O, fill=yes, fillval=$CC;

	# NOTE: Use of type=ro throughout this file ensures, where possible,
	# that no assembled code tries to write to those regions.

}

# -----	SEGMENTS section ------------------------------------------------------------

# This defines the actual code segments, special properties for how they're
# addressed (e.g. alignment), and what they're made up of.

SEGMENTS {

	# The iNES header can be defined in code using:
	#	.segment "INESHDR"
	# ...which means that the stream of bytes that segment would assemble to
	# gets loaded into the HEADER portion of MEMORY, which in turn means it
	# will be written to the output file first.
	INESHDR:	load=HEADER, type=ro, align=$10;

	# The ZEROPAGE segment is treated specially, in that any addresses
	# reserved in it are located in page $00, and hence may be accessed via
	# short-form instructions (e.g. 'lda $12' instead of 'lda $0012').
	ZEROPAGE:	load=ZP, type=zp;

	# The BSS segment, by virtue of type=bss, is assumed to be
	# 'uninitialised memory'. As such, this instructs the assembler & linker
	# to only accept reservations of addresses (e.g. via .res), and reject
	# any attempts to define code or actual data values in this segment.
	# We map this to RAM, since that's basically where all variables live.
	# The align=$100 may not strictly be required: It ensures the segment
	# starts on a 256-byte boundary, i.e. it is aligned to a 6502 'page'.

	# For more information on BSS see:
	#	http://en.wikipedia.org/wiki/.bss
	# For more information on segments in general, see:
	#	http://en.wikipedia.org/wiki/Data_segment
	# NOTE: It seems RODATA is implicitly present...?
	BSS:		load=RAM, type=bss, define=yes, align=$100;

	# If used, the DMC segment (I think?) holds data that may be used by
	# the APU's Delta Modulation Channel
	# (see: http://wiki.nesdev.com/w/index.php/APU_DMC). I don't know much
	# about this yet, but my reading of what I see below is that -- if used --
	# its data is placed first in the ROM, and is aligned to start on a 64-byte
	# boundary, which might be important to how the DMC reads its data.
	DMC:		load=ROM7, type=ro, align=64, optional=yes;

	# Main code is the next (or first) segment placed in the ROM region
	# of memory. It is aligned to start on a 256-byte (i.e. 'page') boundary,
	# for reasons of efficient execution (I think?).
	# NOTE: Presence of the CODE segment is implicit, as it's the default for
	# the source file.
	CODE:		load=ROM7, type=ro, align=$100;

	# RODATA still appears inside the ROM, after CODE, but is just reserved
	# for data that we'd potentially want to reference, or copy to RAM
	# and manipulate. Again, aligning it to a page boundary means that it can
	# be copied more-efficiently in chunks.
	# I don't really intend to use it, though.
	# NOTE: It seems RODATA is implicitly present...?
	RODATA:		load=ROM7, type=ro, align=$100;

	# The interrupt vectors for the 6502 appear right at the top of memory:
	# 	$FFFA	=> NMI.
	#	$FFFC	=> RESET.
	#	$FFFE	=> IRQ/BRK.
	# So, by defining a segment that locates it self at this $FFFA address, and
	# also given we know for sure this is at the top of ROM7, which itself is at
	# the top of the memory map, any data put into this segment will be placed
	# in the correct part of the output binary.
	VECTORS:	load=ROM7, type=ro, start=$FFFA;

	# The pattern data is loaded into the CHR-ROM. Can either use
	# the full PATTERN segment, or the separate PATTERN0 ('left') and
	# PATTERN1 ('right') segments.
	PATTERN:	load=CHR, type=ro, optional=yes;
	PATTERN0:	load=CHR, type=ro, optional=yes; # Implicit start at $0000.
	PATTERN1:	load=CHR, type=ro, optional=yes, start=$1000;
}

# In the way we use it, the FILES section is quite straightforward.
# It just defines that the default output file (denoted by %O, which defaults
# to "a.out" but may be overridden with the ld65 command-line parameter '-o',
# e.g. '-o myfile.nes') is written in straight binary format. There is only
# one other format, which is irrelevant, but described here:
# 	http://www.cc65.org/doc/ld65-5.html#ss5.7
FILES {
	%O: format=bin;
}

